# 写函数，计算传入数字参数的和。
# def sum_func(*args):
# 	num = 0
# 	for a in args:
# 		num += a
# 	return num
# ret = sum_func(1,2,3)
# print(ret)

# 任一个英文的纯文本文件，统计其中的每个单词出现的个数，注意是每个单词。
# def count_words(file):
# 	dic = {}
# 	with open(file,encoding='utf-8') as f:
# 		content = f.read()
# 		ch = ''
# 		for char in content:
# 			if char.isalpha():
# 				ch += char
# 			else:
# 				if ch in dic:
# 					dic[ch] += 1 
# 				else:
# 					dic[ch] = 1
# 				ch = ''
# 	return dic

# ret = count_words('file.txt')
# print(ret)

# 写函数，用户传入修改的文件名，与要修改的内容，执行函数，完成整个文件的批量修改操作
# def change_file(file,src,dst):
# 	with open(file,encoding = 'utf-8') as f1,open(file+'.bak',mode='w',encoding='utf-8') as f2:
# 		content = f1.read()
# 		content = content.replace(src,dst)
# 		f2.write(content)
# 	import os
# 	os.remove(file)
# 	os.rename(file+'.bak',file)

# change_file('file.txt','you','You')


# 写函数，返回一个扑克牌列表，里面有52项，每一项是一个元组
# 例如：[(‘红心’，2),(‘草花’，2), …(‘黑桃','A’)]
# def poker():
# 	ranks = [2,3,4,5,6,7,8,9,10,'J','Q','K','A']
# 	suits = ['红心','草花','方板','黑桃']
# 	lst = []
# 	for rank in ranks:
# 		for suit in suits:
# 			lst.append((suit,rank))
# 	return lst
# ret = poker()
# print(ret)

# 写函数，专门计算图形的面积
# 其中嵌套函数，计算圆的面积，正方形的面积和长方形的面积
# 调用函数area(‘圆形’,圆半径) 返回圆的面积
# 调用函数area(‘正方形’,边长) 返回正方形的面积
# 调用函数area(‘长方形’,长，宽) 返回长方形的面积

# def area(shape,*args): 
# 	def circle(r):
# 		return 3.14*r**2
# 	def square(side):
# 		return side**2
# 	def rectangle(length,width):
# 		return length * width
# 	if shape == '圆形':
# 		ret = circle(args[0])
# 	elif shape == '正方形':
# 		ret = square(args[0])
# 	elif shape == '长方形':
# 		ret = rectangle(args[0],args[1])
# 	else:
# 		ret = None
# 	return ret


# 扩展
# def area(shape,*args): 
# 	def circle(r):
# 		return 3.14*r**2
# 	def square(side):
# 		return side**2
# 	def rectangle(length,width):
# 		return length * width
# 	if shape == '圆形':
# 		ret = circle(*args)
# 	elif shape == '正方形':
# 		ret = square(*args)
# 	elif shape == '长方形':
# 		# args = (6,4)
# 		ret = rectangle(*args)
# 	else:
# 		ret = None
# 	return ret
# ret1 = area('圆形',4)
# ret2 = area('正方形',4)
# ret3 = area('长方形',6,4)
# ret4 = area('三角形',6,4)
# print(ret1,ret2,ret3,ret4)

# s = '''1	603983	N丸美	股吧 资金流 数据	29.58	44.01%	9.04	976	288.75万	0.00%	29.58	29.58	29.58	20.54	-	0.24%	24.67	5.19	
# 2	002636	金安国纪	股吧 资金流 数据	8.64	10.06%	0.79	16.14万	1.35亿	9.81%	8.64	7.87	7.88	7.85	3	6.55%	60.83	2.48	
# '''
# # s先取一行
# line = '1	603983	N丸美	股吧 资金流 数据	29.58	44.01%	9.04	976	288.75万	0.00%	29.58	29.58	29.58	20.54	-	0.24%	24.67	5.191'
# # 想办法去掉不用的内容
# line = '1	603983	N丸美	29.58	44.01%	9.04	976	288.75万	0.00%	29.58	29.58	29.58	20.54	-	0.24%	24.67	5.191'
# # 根据分隔符把数据切开
# line_lst = ['1','603983','29.58','44.01%','9.04'...'5.191']
# 注意：
# 所有的数字的比较都是和我们这边的字符串对着的
# 找股票中  '振幅 > 10%'
# 把字符串直接转换成计算
	# 你需要知道 振幅对应着你的数据结构列表中的哪一项lst[7]
	# 取每一行的lst，用lst[7]和用户输入的10%作比较
	# 用户输入的10%也是字符串，想办法把‘10%’转换成数字
	# 你的列表中的数字其实也是字符串，想办法转换成数字
	# 两个数字之间才开始比较
	# 符合条件的选出来
	# ‘xxxx万’ -转成-> 数字 
	# ‘xxxx亿’ -转成-> 数字


# 字典的嵌套
d = {'key':
		{'k2':
			{'钥匙':'值'}
		}

	}
print(d['key'])
# d2 =  {'k2': {'钥匙': '值'}}
print(d['key']['k2'])
# d3 = {'钥匙': '值'}  = d['key']['k2']
# d3['钥匙']
print(d['key']['k2']['钥匙'])

